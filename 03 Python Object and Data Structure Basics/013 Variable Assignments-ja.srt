1
00:00:05,550 --> 00:00:06,540
みんなを歓迎します。

2
00:00:06,630 --> 00:00:10,990
この講義では、変数の割り当てについて議論します。

3
00:00:11,030 --> 00:00:12,750
さて、数字を扱う方法を見ただけです。

4
00:00:12,770 --> 00:00:14,860
しかし、これらの数字は実際何を表していますか？

5
00:00:14,870 --> 00:00:16,780
私たちは整数と浮動小数点数を持っていました。

6
00:00:16,800 --> 00:00:19,720
しかし、実際には変数名が割り当てられています。

7
00:00:19,880 --> 00:00:24,650
したがって、これらの特定のデータ型に変数名を割り当てることができれば、コードで後でそれらを簡単に参照できるようになります。

8
00:00:24,650 --> 00:00:25,900
&nbsp;

9
00:00:25,940 --> 00:00:33,110
私は2匹の犬がいるので、例えば、私は変数名を言うことができます私のアンダースコア犬は2に等しいです。

10
00:00:33,190 --> 00:00:36,360
現在、Pythonで変数名を選択するための2つのルールがあります。

11
00:00:36,610 --> 00:00:39,460
そして、これらの規則は、名前が数字のために始めることができないということです。

12
00:00:39,460 --> 00:00:44,110
変数名には空白を入れないでください。そのため、代わりにアンダースコアを使用する必要があります。

13
00:00:44,110 --> 00:00:46,590
そして、あなたはまた、これらのシンボルのいずれかを名前に入れることができます。

14
00:00:46,630 --> 00:00:51,220
変数名にこれらのシンボルのうちの1つを入力すると、このシンボルのリストを実際に忘れてしまった場合、Pythonはすぐに不平を言うでしょうし、エラーが発生します。

15
00:00:51,220 --> 00:00:54,100
&nbsp;

16
00:00:54,100 --> 00:00:55,990
だから、これらすべてを覚えることについて心配する必要はありません。

17
00:00:55,990 --> 00:00:59,950
あなたは、変数名に関するいくつかの規則に沿って入力しながら、空気を得るでしょう。

18
00:00:59,950 --> 00:01:05,130
名前は小文字であることが一般的に考えられています。

19
00:01:05,140 --> 00:01:08,350
今、あなたが高度なプログラマーになる状況があります。

20
00:01:08,470 --> 00:01:12,850
どこにコードを書くのに使われる一種の大域変数名をすべての大文字小文字にしたいか。

21
00:01:12,850 --> 00:01:13,390
&nbsp;

22
00:01:13,570 --> 00:01:19,000
&nbsp;

23
00:01:19,000 --> 00:01:24,460
しかし、現在では一般的には名前を小文字にしたいと思っています。また、Pythonで特別な意味を持つ単語を避けたいのです。これらはlistやstringのようなキーワードで構築されています。

24
00:01:24,460 --> 00:01:28,600
あなたは、私は何が特別なキーワードが組み込まれているか知っているはずだとうまくいかにうまくいくのだろうかと疑問に思うかもしれません。

25
00:01:28,600 --> 00:01:33,400
&nbsp;

26
00:01:33,430 --> 00:01:38,440
&nbsp;

27
00:01:38,440 --> 00:01:40,330
幸運なことに、Pythonで動作するように設計された開発環境には構文の強調表示があり、組み込みのキーワードを使用して別の色を強調表示し、その例をちょっと見てみましょう。

28
00:01:42,060 --> 00:01:46,710
&nbsp;

29
00:01:47,130 --> 00:01:52,410
&nbsp;

30
00:01:52,410 --> 00:01:53,500
私たちが実際に木星の本にジャンプする前に、私はPythonがダイナミクスのハイフンを使用していることを言及したいと思います。これは変数をさまざまなデータ型に再割り当てできることを意味し、これによりPythonはデータ型の割り当てを非常に柔軟にします。

31
00:01:53,520 --> 00:01:57,960
そして、それは静的に型付けされた他の多くのプログラミング言語と実際は異なっています。

32
00:01:57,960 --> 00:02:04,110
ですから、私がこれによってPythonで何を意味するかの例を、まったく問題ないように見せてください。

33
00:02:04,310 --> 00:02:09,890
ここで私は犬の変数名を2に割り当てた後、私のコードで私は先に進んで同じ変数名を私の犬を全く異なるデータ型リストに再割り当てしました。

34
00:02:09,890 --> 00:02:14,720
&nbsp;

35
00:02:14,750 --> 00:02:16,370
サミーとフランキー。

36
00:02:16,490 --> 00:02:20,850
これで、Pythonでは完全にOKですが、他の言語ではエラーが発生します。

37
00:02:20,920 --> 00:02:26,370
それは、これらの他の言語が静的に型定義されているという意味で、C言語のような他の言語では意味があります。

38
00:02:26,370 --> 00:02:32,190
A.

39
00:02:32,220 --> 00:02:35,000
整数のために私の犬は1のような整数値が必要なものと等しく、そしてあなたのコードの後ろにあると言う。

40
00:02:35,030 --> 00:02:38,100
別のデータ型を割り当てることはできません。

41
00:02:38,100 --> 00:02:42,850
あなたは私の犬がもはや整数ではないので、私の犬はサミーに等しいと言うことができません。

42
00:02:42,870 --> 00:02:44,860
今度はエラーになります。

43
00:02:44,910 --> 00:02:48,590
だから、Pythonの動的な型付けにはいくつかの長所と短所があります。

44
00:02:48,630 --> 00:02:52,600
散文は、実際のデータ型を書き出す必要がないということです。

45
00:02:52,650 --> 00:02:57,150
多くの時間を節約し、Pythonコードを素早く生成するのが簡単になります。また、変数名を読み取っているだけなので、コードを読みやすくします。

46
00:02:57,150 --> 00:03:00,720
&nbsp;

47
00:03:00,720 --> 00:03:05,820
&nbsp;

48
00:03:05,820 --> 00:03:09,960
ここでは、この種の二重の剣はここにあります。これは、ユーザーの入力を処理しているときに特にこのようなデータ型の制限がないため、予期しないデータ型にバグが発生する可能性があるためです。

49
00:03:09,960 --> 00:03:11,080
&nbsp;

50
00:03:11,130 --> 00:03:16,660
予期しないデータ型が表示され、後で操作で問題を引き起こす可能性があります。

51
00:03:17,100 --> 00:03:21,570
したがって、コーディングするときにデータ型を認識し、Pythonに組み込まれた特別な型の関数を使用して、変数の型をすばやく確認し、その使用方法を示すことができます。

52
00:03:21,570 --> 00:03:26,000
&nbsp;

53
00:03:26,010 --> 00:03:28,290
そしてちょっとだけ。

54
00:03:28,500 --> 00:03:31,830
さて、別の本にジャンプして、これらのコンセプトをすべて探そう。

55
00:03:32,730 --> 00:03:36,960
さて、Pythonで数値を使用して電卓として使用する方法を見てきたので、名前を割り当てて変数を作成する方法を見てみましょう。

56
00:03:36,960 --> 00:03:38,520
&nbsp;

57
00:03:38,520 --> 00:03:43,590
最初に、Aという非常に単純な変数を作成し、それを5に設定します。

58
00:03:43,980 --> 00:03:47,640
そして今、私がコードを呼び出してどこでも実行しています。

59
00:03:47,960 --> 00:03:53,820
これで変数5が割り当てられ、Aが10のような別のものと等しいと言うだけで、変数を再割り当てできます。

60
00:03:53,820 --> 00:03:54,810
&nbsp;

61
00:03:55,260 --> 00:04:02,940
そして、今私はそれが10あることを確認し、私は今一緒にオブジェクトを追加することができます私はプラスA.と言うことができる

62
00:04:02,940 --> 00:04:07,420
10プラス10が20に等しいので、それは20になります。

63
00:04:07,560 --> 00:04:13,260
Pythonでは、同じオブジェクトへの参照を使って再割り当てを行うこともできます。

64
00:04:13,260 --> 00:04:14,440
私がそれを意味するものを見せてあげましょう。

65
00:04:14,580 --> 00:04:21,420
私はまだ10に等しいAと言うことができました。私はAのようなものがAと等しいと言うためにそれを再割り当てすることができました。

66
00:04:21,480 --> 00:04:23,140
&nbsp;

67
00:04:23,400 --> 00:04:28,740
つまり、Aの現在の値を10とし、それをAに再割り当てすることです。

68
00:04:28,770 --> 00:04:30,200
それは10プラス10です。

69
00:04:30,210 --> 00:04:34,660
だから私はこれを実行した後、今は20に等しくなります。

70
00:04:34,810 --> 00:04:38,010
そして、もし私がこのセルを2回目に動かすことを覚えておいてください。

71
00:04:38,140 --> 00:04:42,410
だから私はここでは40から42に行くつもりの演算子に気づいた。

72
00:04:42,490 --> 00:04:49,570
私がもう一度走れば、今度は40になり、何度も何度でもこのことをやり続けることができます。

73
00:04:49,810 --> 00:04:51,410
&nbsp;

74
00:04:51,700 --> 00:04:52,960
だから心に留めておいてください。

75
00:04:52,960 --> 00:04:57,040
&nbsp;

76
00:04:57,040 --> 00:05:01,320
これはスクリプト環境とは少し異なりますが、高いスクリプトを実行している場合は、セル環境でその行を1回だけ持つことになるため、実際にはその効果は見えません。

77
00:05:01,330 --> 00:05:03,670
あなたはそのセルを何度も何度も実行しなければならないでしょう。

78
00:05:04,070 --> 00:05:04,500
OK。

79
00:05:04,750 --> 00:05:11,410
&nbsp;

80
00:05:11,430 --> 00:05:17,200
だから、あなたができるタイプがどこにあるのか分からないと仮定しましょう。組み込みタイプの関数を使うことです。そのため、閉じたカッコで開いているので、後で独自の関数を作成する方法を学びます。

81
00:05:17,200 --> 00:05:18,130
&nbsp;

82
00:05:18,130 --> 00:05:24,010
しかしpasand変数にはshiftを入力すると、その型のためのPythonの組み込みキーワードが返されます。

83
00:05:24,010 --> 00:05:24,630
&nbsp;

84
00:05:24,640 --> 00:05:27,410
そして、この場合は私です。 A. それは整数なので。

85
00:05:27,550 --> 00:05:30,310
浮動小数点数に再割り当てしましょう。

86
00:05:30,340 --> 00:05:32,070
だから私たちは30ポイントの1を言うでしょう。

87
00:05:32,110 --> 00:05:36,910
その型の型を調べて、それを返します。

88
00:05:36,910 --> 00:05:41,980
したがって、これらのキーワードは、基本データ型の表について説明するときに見たのと同じキーワードです。

89
00:05:41,980 --> 00:05:47,320
今では先ほど触れたように、Pythonのキーワードを変数名として使うのを避けたいのですが、それが起こっているかどうかを知る方法は、私がIを割り当てたいとしましょう。

90
00:05:47,320 --> 00:05:54,310
A. 4に等しい。

91
00:05:54,310 --> 00:05:55,760
&nbsp;

92
00:05:55,810 --> 00:05:57,150
ここで何が起こっているのか注目してください。

93
00:05:57,160 --> 00:06:01,610
私はIで構文の強調表示をしています。 A. 私は前にそれを得ていませんでした。

94
00:06:01,630 --> 00:06:07,150
つまり、ここで私とtは特殊な組み込みキーワードです。このようなものには使用しないでください。

95
00:06:07,150 --> 00:06:07,750
&nbsp;

96
00:06:07,750 --> 00:06:13,390
だから、あなたの変数名には、通常の変数名には特別な強調表示があることが分かっているなら、これを使わないでください。

97
00:06:13,390 --> 00:06:15,810
&nbsp;

98
00:06:15,820 --> 00:06:18,130
だから間違いなくそれを実行しないでください。

99
00:06:18,130 --> 00:06:20,590
そして、あなたが実際にそれを実行した場合、あなたは一緒に従っていた。

100
00:06:20,770 --> 00:06:22,930
あるいは、他の再割り当てミスをしたかもしれません。

101
00:06:22,930 --> 00:06:28,270
あなたはいつでもカーネルに来て、カーネルの再起動を選択することができます。カーネルを再起動すると、すべての変数が削除されてすべての変数が失われます。

102
00:06:28,270 --> 00:06:31,630
&nbsp;

103
00:06:31,660 --> 00:06:36,670
あなたがリストやIのようなものを再割り当てするので、何らかの奇妙なエラーが起きた場合は A.

104
00:06:37,030 --> 00:06:38,290
ここで再起動できます。

105
00:06:38,440 --> 00:06:41,430
カーネルを再起動し、セルを再実行する必要があります。

106
00:06:41,560 --> 00:06:47,170
私たちがここで言うならば、私はSin-Eaterが細胞を再実行すると定義していないと言います。

107
00:06:47,170 --> 00:06:49,980
&nbsp;

108
00:06:50,420 --> 00:06:56,570
私が知りたい最後のことは、変数名を使用する簡単な例です。

109
00:06:56,830 --> 00:07:08,240
だから、私の所得が100に等しいと言うでしょうし、セルで私は私の税率が私は10％税率が0だと言うと言うでしょう。

110
00:07:08,240 --> 00:07:13,420
1と私は私の総納税額が何であるか把握したい。

111
00:07:13,550 --> 00:07:18,130
私の税金は私の所得と等しいと言います。

112
00:07:18,280 --> 00:07:24,600
私は税金を掛けるので、私は税金が何であるかをチェックします。

113
00:07:24,600 --> 00:07:25,750
いくらですか。

114
00:07:25,960 --> 00:07:27,240
私は税金をチェックします。

115
00:07:27,240 --> 00:07:29,040
そしてそこには10があります。 0。

116
00:07:29,130 --> 00:07:35,880
ですから、変数名でロジックを実行することができます。これは整数や浮動小数点数を使用するよりもはるかに読みやすくなります。

117
00:07:35,880 --> 00:07:36,770
&nbsp;

118
00:07:36,780 --> 00:07:42,540
今私は私の税金が私の税率と私の収入に等しいと言っているこの素晴らしい英語の文を持っているので。

119
00:07:42,540 --> 00:07:43,320
&nbsp;

120
00:07:43,600 --> 00:07:45,990
これで、Pythonで基本的な数字を学びました。

121
00:07:45,990 --> 00:07:49,830
私たちはティックに対処する方法を学び、Pythonで変数を代入する方法を学ぶことで包括しました。

122
00:07:50,040 --> 00:07:51,300
&nbsp;

123
00:07:51,300 --> 00:07:53,420
次に、文字列について学びます。

124
00:07:53,430 --> 00:07:54,190
私はそこにお会いしましょう。
