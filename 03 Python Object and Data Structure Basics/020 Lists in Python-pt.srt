1
00:00:05,740 --> 00:00:06,910
Bem-vindo de volta a todos.

2
00:00:06,910 --> 00:00:13,310
Agora, vamos começar a discutir listas em listas de python ou sequências de pedidos que podem conter uma variedade

3
00:00:13,310 --> 00:00:18,110
de tipos de objeto e usar colchetes e vírgulas para separar os objetos na lista.

4
00:00:18,110 --> 00:00:24,350
Por exemplo, aqui podemos ver uma lista de números 1 2 3 4 5 e listas, como strings, que suportam indexação

5
00:00:24,350 --> 00:00:29,270
e corte, e isso também pode ser aninhado e ter uma variedade de métodos úteis que

6
00:00:29,270 --> 00:00:30,160
podem ser cancelados.

7
00:00:30,170 --> 00:00:32,740
Vamos explorar todos esses conceitos em um caderno Jupiter.

8
00:00:32,990 --> 00:00:41,330
Vamos começar definindo uma variável chamada minha lista e nós a definiremos igual aos números 1 a 3.

9
00:00:41,340 --> 00:00:44,480
Então, aqui podemos ver que uma lista é definida pelos colchetes.

10
00:00:44,520 --> 00:00:48,390
E então temos todo tipo de objeto separado por uma vírgula.

11
00:00:48,390 --> 00:00:53,040
Nós simplesmente criamos uma lista de números inteiros, mas também poderíamos criar uma lista de tipos de objetos mistos.

12
00:00:53,040 --> 00:00:56,040
Então, o primeiro poderia ter sido uma string.

13
00:00:56,040 --> 00:01:02,730
O segundo poderia ter sido um número ou ponto flutuante e a lista não tem problemas para que possamos ver as listas de

14
00:01:02,730 --> 00:01:07,890
python são muito flexíveis nos tipos de dados que eles podem conter e se quiser verificar o comprimento

15
00:01:08,190 --> 00:01:13,320
de uma lista, tal como nós poderíamos verificar o O comprimento da seqüência de caracteres que acabamos de

16
00:01:13,320 --> 00:01:19,530
usar a função LCN incorporada ao Python e depois passa a minha lista e retorna quantos elementos ou itens estão nessa lista.

17
00:01:19,530 --> 00:01:24,440
Então, aqui temos três itens de cordão cento e vinte e três pontos dois.

18
00:01:24,450 --> 00:01:29,390
Agora, como uma string porque uma lista é uma sequência ordenada de elementos.

19
00:01:29,520 --> 00:01:33,310
Podemos usar indexação e corte e isso funciona como uma string.

20
00:01:33,300 --> 00:01:34,980
Então, vamos mostrar o que quero dizer com isso.

21
00:01:35,130 --> 00:01:46,390
Eu direi que minha lista é igual a dizer que 1 a 3 executem isso.

22
00:01:46,740 --> 00:01:50,070
E então, se eu quisesse pegar o elemento para indexar 0.

23
00:01:50,070 --> 00:01:57,130
Então esse é o primeiro elemento que eu apenas diria que minha lista é executada e eu volto 1 e, se

24
00:01:57,140 --> 00:02:00,970
eu quisesse pegar tudo começando no índice 1 até o final.

25
00:02:01,030 --> 00:02:03,720
Bem, é como indexação de cordas e corte de cordas.

26
00:02:03,870 --> 00:02:09,890
Eu diria que comecei a indexar um cólon até o final e depois temos dois e três.

27
00:02:09,900 --> 00:02:17,620
Então, esse corte e indexação funcionam exatamente como uma string e você também pode concatenar tudo isso.

28
00:02:17,640 --> 00:02:19,480
Então vamos ver isso aqui.

29
00:02:19,620 --> 00:02:22,770
Eu tenho minha lista agora que é um dois três.

30
00:02:23,040 --> 00:02:35,640
Eu vou criar outra lista que é igual a dizer 4 5 e eu posso ver minha lista mais em outra

31
00:02:35,640 --> 00:02:39,080
lista e concatenará uma nova lista.

32
00:02:39,090 --> 00:02:41,330
Um dois três quatro cinco.

33
00:02:41,340 --> 00:02:43,850
Observe aqui que estou realmente salvando esse resultado.

34
00:02:43,950 --> 00:02:50,170
Então, se eu chamasse de volta a minha lista ou outra lista, eu posso usar a guia de preenchimento automático aqui.

35
00:02:50,280 --> 00:02:54,300
Eu ainda tenho essas duas listas separadas, se eu realmente quiser salvar isso. Eu

36
00:02:54,810 --> 00:03:02,820
preciso atribuí-lo a algo para que possamos dizer que a nova lista é igual à minha lista mais outra lista e então, se eu verificar uma nova lista, agora

37
00:03:02,870 --> 00:03:04,710
é um dois três quatro ou cinco.

38
00:03:05,140 --> 00:03:05,720
ESTÁ BEM.

39
00:03:05,850 --> 00:03:08,100
Então, esses são o básico dos ouvintes.

40
00:03:08,130 --> 00:03:17,620
semelhantes a uma string, exceto o que é diferente de uma string aqui, é que podemos realmente mutar ou mudar em torno da lista.

41
00:03:17,620 --> 00:03:22,720
Aqui, temos a indexação de fatiamento e as concatenações devem se sentir bastante

42
00:03:22,720 --> 00:03:28,480
Lembre-se de volta quando estamos tentando mudar as letras em torno de uma string, não nos deixa uma lista,

43
00:03:28,540 --> 00:03:30,140
não tem problema dessa maneira.

44
00:03:30,160 --> 00:03:34,970
Então, se eu verificar minha nova lista, é um dois três quatro cinco.

45
00:03:35,120 --> 00:03:40,510
Vamos seguir em frente e mudar um desses elementos, vamos mudar um para estar em todos os limites.

46
00:03:40,550 --> 00:03:47,130
O que eu poderia fazer é dizer que a nova lista na posição 0 agora é igual a 1 em todos os limites.

47
00:03:47,130 --> 00:03:49,160
Agora vamos deixar muito óbvio que estamos mudando.

48
00:03:49,210 --> 00:03:58,440
eu digo um todos os limites e agora, se eu olhar para a minha nova lista, eu tenho um todos os limites dois três quatro cinco.

49
00:03:58,450 --> 00:03:59,270
Então, quando

50
00:03:59,360 --> 00:04:04,320
Então, é assim que você pode realmente mutar ou alterar os elementos que já estão na lista.

51
00:04:04,380 --> 00:04:07,180
E isso é algo que o diferencia de uma string.

52
00:04:07,180 --> 00:04:12,100
Além do fato de que também possui diferentes tipos de elementos e chaves e vírgulas.

53
00:04:12,110 --> 00:04:16,090
Então, novamente, você pode alterá-las e afetar elementos dentro delas.

54
00:04:17,290 --> 00:04:22,850
Em outra operação comum que você pode querer executar é adicionar um elemento ao final de uma lista.

55
00:04:23,290 --> 00:04:29,830
E assim podemos fazer isso, é dizer os pontos mais novos e clicar aqui e você deve ver todos os

56
00:04:29,830 --> 00:04:32,530
vários métodos disponíveis para você em uma lista.

57
00:04:32,530 --> 00:04:39,400
Aquele que vamos mostrar aqui é o método anexar e anexar permite que você adicione um novo item ao

58
00:04:39,400 --> 00:04:40,720
final de uma lista.

59
00:04:41,050 --> 00:04:48,950
Então, vou dizer anexar 6 e depois de ler este bem, vamos ver que se eu verificar minha nova lista, eu tenho

60
00:04:50,420 --> 00:04:54,860
um todos os limites dois três quatro cinco e eu tenho seis agora.

61
00:04:54,860 --> 00:05:01,400
Então observe como uma caneta realmente afeta a lista e nós chamamos isso de afetar isso em um lugar

62
00:05:01,400 --> 00:05:06,280
porque ele permanentemente muda essa nova lista para ter um elemento no final disto.

63
00:05:06,290 --> 00:05:07,560
Então isso é conhecido como uma caneta.

64
00:05:07,580 --> 00:05:10,760
E, novamente, permite que você coloque qualquer item no final de uma lista.

65
00:05:10,760 --> 00:05:12,630
Vamos tentar mais uma vez.

66
00:05:12,720 --> 00:05:20,910
Vou enviar uma lista para uma caneta, digamos que sete correm esse ls checker e você lista e eu posso ver uma de todas as maiúsculas.

67
00:05:20,910 --> 00:05:22,520
Dois três quatro cinco seis.

68
00:05:22,560 --> 00:05:25,830
E então, sete, só porque estou muito aperfeiçoado aqui é meio que cortá-lo.

69
00:05:26,010 --> 00:05:30,180
Mas se você quisesse diminuir o zoom, comece a vê-lo de forma mais normal.

70
00:05:30,180 --> 00:05:30,500
Tudo bem.

71
00:05:30,540 --> 00:05:32,550
Então, sabemos como adicionar coisas a uma lista.

72
00:05:32,550 --> 00:05:34,790
Vamos falar sobre como remover itens de uma lista.

73
00:05:34,890 --> 00:05:37,590
Para fazer isso, podemos usar o método pop.

74
00:05:37,680 --> 00:05:43,960
Então, o pop realmente vai aparecer um item do final de uma lista.

75
00:05:44,000 --> 00:05:45,480
Vamos mostrar o que você quer dizer com isso.

76
00:05:45,680 --> 00:05:52,200
Vamos dizer nova lista que pop abrir e fechar impressão vê ruber para muitas dessas chamadas de método.

77
00:05:52,220 --> 00:05:54,580
Se você não tem Prince está lá e você apenas os executa.

78
00:05:54,710 --> 00:05:55,650
Ele vai relatar.

79
00:05:55,660 --> 00:05:59,070
Ei, essa é a função pop dentro deste novo objeto.

80
00:05:59,090 --> 00:06:02,930
Se você realmente quiser chamar isso, você precisa de parênteses abertos e fechados.

81
00:06:02,930 --> 00:06:06,230
E depois discutiremos as diferenças entre métodos e funções.

82
00:06:06,260 --> 00:06:09,770
Você provavelmente me ouviu usar esses termos um pouco de forma intercambiável, agora vamos entrar

83
00:06:09,770 --> 00:06:11,330
em mais detalhes sobre eles mais tarde.

84
00:06:11,630 --> 00:06:17,960
Mas agora vimos que dissemos uma lista que apareceu e que apareceu fora dos 7 e que realmente foi

85
00:06:17,960 --> 00:06:18,810
retornado também.

86
00:06:20,210 --> 00:06:25,380
E se olharmos para a nova lista, agora não tem mais a string 7 nele.

87
00:06:25,380 --> 00:06:28,350
Agora, ele sobe até a corda 6.

88
00:06:28,350 --> 00:06:31,380
Então, na verdade, salvou o resultado de um pop.

89
00:06:31,440 --> 00:06:42,700
Então, podemos dizer que o item é igual a uma nova lista e vou dizer pop.

90
00:06:42,830 --> 00:06:47,900
E quando eu executo isso, o que vai acontecer é que este item pop é agora o item que estava no

91
00:06:47,900 --> 00:06:48,610
final dessa lista.

92
00:06:48,740 --> 00:06:56,330
Então eu posso copiar e colar este item pop e agora eu tenho 6 dizem que há o item pop e não é

93
00:06:56,330 --> 00:06:58,110
mais parte da minha lista.

94
00:06:58,160 --> 00:07:03,820
Agora, uma pergunta comum que surge aqui é que eu não quero remover algo do final da lista.

95
00:07:04,010 --> 00:07:10,870
Eu quero removê-lo em um índice específico, por exemplo, eu quero remover todos os limites no índice 0.

96
00:07:11,090 --> 00:07:12,310
Bem, na verdade não é problema.

97
00:07:12,320 --> 00:07:18,870
Você pode passar em uma posição de índice no pop que podemos dizer e você lista o pop e depois passa

98
00:07:18,870 --> 00:07:21,260
na posição do índice do que deseja remover.

99
00:07:21,270 --> 00:07:25,110
Podemos ver aqui que um todos os limites é a posição de índice 0.

100
00:07:25,200 --> 00:07:27,300
Então, é pasand 0.

101
00:07:27,420 --> 00:07:27,920
Executá-lo.

102
00:07:27,930 --> 00:07:35,750
Agora, podemos ver que nós abrimos um todos os limites e, se você listar agora, temos dois três quatro cinco.

103
00:07:36,040 --> 00:07:41,230
Então, novamente, pop basicamente remove itens da lista em qualquer local que você fornecer.

104
00:07:41,290 --> 00:07:44,260
Por padrão, a localização do índice é negativa 1.

105
00:07:44,290 --> 00:07:45,830
O final de uma lista.

106
00:07:45,910 --> 00:07:53,240
Então, a indexação reversa também funciona de lista, assim como funcionou para a string, alguns métodos mais que eu

107
00:07:53,240 --> 00:07:59,720
quero discutir, além de pop e acrescentar, que serão realmente métodos comuns que você está usando, é

108
00:07:59,720 --> 00:08:00,860
ordenar e reverter.

109
00:08:00,860 --> 00:08:03,040
Então, para fazer isso, vou criar uma nova lista.

110
00:08:03,050 --> 00:08:04,220
Vamos ampliar aqui.

111
00:08:05,170 --> 00:08:11,170
ler a lista boa e eu vou ver a lista final para ser um par de cartas aqui, mas

112
00:08:11,170 --> 00:08:13,930
nós vamos ordená-las de acordo com a ordem alfabética.

113
00:08:17,270 --> 00:08:18,220
Então eu vou

114
00:08:18,340 --> 00:08:22,540
E também faremos a lista de números para que digamos que o mais mínimo é igual.

115
00:08:22,540 --> 00:08:25,650
E vamos fazer isso apenas um monte de números fora de ordem também.

116
00:08:27,270 --> 00:08:28,900
OK, então temos duas listas.

117
00:08:28,950 --> 00:08:35,280
Se quisermos classificar essas listas onde podemos fazer é chamado de método de classificação fora delas, podemos ver um novo tipo

118
00:08:35,280 --> 00:08:39,680
de lista e você pode usar a guia de preenchimento automático para fazer isso.

119
00:08:39,970 --> 00:08:46,060
Abra um parêntese próximo e este é realmente um tipo de método especial porque não

120
00:08:46,060 --> 00:08:47,050
reporta nada.

121
00:08:47,110 --> 00:08:49,510
Em vez disso, o que está fazendo é que ele vai classificar.

122
00:08:49,510 --> 00:08:53,260
Nova lista no lugar que significa que não retorna nada.

123
00:08:53,260 --> 00:08:58,090
Em vez disso, quando você retorna novamente a nova lista, ele agora está ordenado por ordem alfabética.

124
00:08:58,090 --> 00:09:03,640
ABC X e essa é uma distinção importante a fazer porque muitas vezes os iniciantes vão

125
00:09:03,640 --> 00:09:04,620
fazer algo assim.

126
00:09:04,750 --> 00:09:12,380
Eles vão dizer que a minha lista ordenada é igual a sua lista desse tipo.

127
00:09:12,750 --> 00:09:18,450
Mas o que acontecerá aqui é porque a nova lista desse tipo ocorre no lugar, na verdade,

128
00:09:18,450 --> 00:09:20,320
não reporta nada para você atribuir.

129
00:09:20,340 --> 00:09:25,210
Então, quando você chama minha lista ordenada, você não recupera nada ou nenhum.

130
00:09:25,270 --> 00:09:33,360
E você pode realmente verificar o tipo deste e vai dizer que é um tipo de sangue e qual tipo

131
00:09:33,360 --> 00:09:36,050
é o tipo para o objeto none.

132
00:09:36,060 --> 00:09:41,640
Então, na verdade, um objeto especial em Python chamou nenhum de ter notado a capital e lá e isso é

133
00:09:41,640 --> 00:09:47,460
apenas algo que você pode usar para indicar nenhum valor e muitas vezes as pessoas o mantêm como um espaço reservado.

134
00:09:47,610 --> 00:09:53,320
Mas, realmente, o que é é o valor de retorno de uma função ou um método que realmente não retorna nada.

135
00:09:53,550 --> 00:09:58,140
Portanto, é um valor de retorno padrão comum para funções que podem procurar por algo

136
00:09:58,140 --> 00:10:00,180
e pode ou não encontrá-lo, por exemplo.

137
00:10:00,180 --> 00:10:05,280
Então, essa é uma distinção importante para observar aqui que, quando você está usando este método de classificação, ele

138
00:10:05,280 --> 00:10:06,480
está realmente ocorrendo no lugar.

139
00:10:06,510 --> 00:10:10,420
Então, você não poderá reatribuir o resultado a outra coisa.

140
00:10:10,440 --> 00:10:19,940
Se você quisesse fazer isso, você precisaria fazer uma nova lista que adormeça e depois diga que minha lista ordenada é igual à

141
00:10:19,940 --> 00:10:28,380
nova lista e, em seguida, quando você executa, você pode ter minha lista ordenada usando a guia preenchida automaticamente e você

142
00:10:28,830 --> 00:10:33,870
irá Retornar sua lista ordenada mais tente essa lista de números novamente.

143
00:10:33,870 --> 00:10:37,150
Então, agora, a lista não é triada.

144
00:10:37,200 --> 00:10:44,950
Se eu chamar o método de classificação fora dele e eu verifico o mais fácil agora, ele está ordenado.

145
00:10:45,000 --> 00:10:45,460
Tudo bem.

146
00:10:45,690 --> 00:10:49,290
Vamos também discutir o método reverso fora da lista como você pode esperar.

147
00:10:49,320 --> 00:10:51,960
Isso irá reverter tudo na sua lista.

148
00:10:51,960 --> 00:10:59,680
Então, basta inverter a impressão fechada, veja executar isso e também está no local, o que significa que não retorna nada.

149
00:10:59,800 --> 00:11:04,880
E quando você chama sua versão reversa da sua lista, eles tiveram 8 4 3 dois 1.

150
00:11:04,890 --> 00:11:05,460
Tudo bem.

151
00:11:05,520 --> 00:11:11,940
Esse é realmente o básico das listas e a maioria dos métodos de suporte para entender são o método de adição e o

152
00:11:11,940 --> 00:11:14,850
método pop, bem como o método de classificação e reversão.

153
00:11:14,940 --> 00:11:19,380
E, assim como as cordas, conseguiram fazer indexação e cortar.

154
00:11:19,380 --> 00:11:26,760
Então, se você voltar aqui, podemos dizer indexação e anotação em fatia como um ponto de vista.

155
00:11:26,880 --> 00:11:30,750
Então, isso funciona exatamente como você esperaria que ele funcionasse como ocorreu com as cordas.

156
00:11:30,750 --> 00:11:35,450
A única coisa a notar aqui é diferente de strings, podemos fazer reatribuições como se houvéssemos

157
00:11:35,450 --> 00:11:36,590
aparecer com uma lista.

158
00:11:36,630 --> 00:11:37,010
ESTÁ BEM.

159
00:11:37,080 --> 00:11:38,520
Esse é o básico de uma lista.

160
00:11:38,580 --> 00:11:41,100
Em seguida, vamos discutir os dicionários.

161
00:11:41,100 --> 00:11:42,090
Eu vou ver isso lá.
