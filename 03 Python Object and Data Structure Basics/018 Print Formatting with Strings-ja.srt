1
00:00:05,580 --> 00:00:06,700
皆を歓迎します。

2
00:00:06,780 --> 00:00:11,020
文字列の書式を頻繁に調べることはしません。

3
00:00:11,030 --> 00:00:15,590
あなたは、印刷のために文字列に変数を挿入できるようにするつもりです。

4
00:00:15,590 --> 00:00:17,560
そこで、すでに連結について学びました。

5
00:00:17,690 --> 00:00:22,040
たとえば、私の名前がJoseと等しい変数を持ち、そのフレーズを印刷したいとします。

6
00:00:22,040 --> 00:00:23,040
ハロー・ホセ。

7
00:00:23,090 --> 00:00:25,310
だからあなたがやってしまうのはプリンスと言うことです。

8
00:00:25,460 --> 00:00:30,170
そしてその印刷機能の中で、あなたはこんにちはと言い、それをmy name変数と連結します。

9
00:00:30,170 --> 00:00:34,370
今では、文字列を書式設定するための文字列を複数の方法で実際に書いていますので、常にこの連結記号やプラス記号を使用する必要はありません。

10
00:00:34,370 --> 00:00:37,190
&nbsp;

11
00:00:37,430 --> 00:00:41,840
&nbsp;

12
00:00:41,840 --> 00:00:47,490
そして、これは一般的に文字列の照合として知られています。これは、変数を文字列に張り付けるという基本的な方法ですから、これを行う2つの方法を探求します。

13
00:00:47,510 --> 00:00:52,920
1つはフォーマットメソッドであり、もう1つはフォーマットされた文字列リテラルを表すstringsメソッドです。

14
00:00:53,060 --> 00:00:56,830
これはPython 3の新しいバージョンの新しいメソッドです。

15
00:00:56,870 --> 00:01:01,160
私は個人的にはその形式の方法を好むが、先に進んで両方を見せて、どれがあなたのスタイルであるかを決めることができる。

16
00:01:01,160 --> 00:01:03,200
&nbsp;

17
00:01:03,200 --> 00:01:04,060
始めましょう。

18
00:01:04,240 --> 00:01:04,500
OK。

19
00:01:04,520 --> 00:01:10,330
&nbsp;

20
00:01:10,340 --> 00:01:16,400
&nbsp;

21
00:01:16,400 --> 00:01:20,950
フォーマットメソッドとその基本的な構文について議論することから始めましょう。文字列を定義して文字列の中に挿入する変数のプレースホルダとして特別な中括弧を使用する予定です。その形式と呼ばれる文字列を書き出します。

22
00:01:21,110 --> 00:01:26,510
そして、この中で文字列に挿入したい文字列や変数を呼び出します。

23
00:01:26,510 --> 00:01:27,400
&nbsp;

24
00:01:27,410 --> 00:01:29,590
ここでたくさんの例を見てみましょう。

25
00:01:29,660 --> 00:01:36,050
私たちは最も基本的な例から始めます。これはちょうどこれが中括弧を開いて閉じるための文字列であるということです。

26
00:01:36,050 --> 00:01:37,390
&nbsp;

27
00:01:37,550 --> 00:01:40,660
そして文字列の直後に、その形式と呼ぶつもりです。

28
00:01:40,670 --> 00:01:45,840
だから、ドットがそこにある文字列にどのように触れているのか、次に挿入したい文字列に触れていることに注意してください。

29
00:01:45,880 --> 00:01:53,210
だからそれを本当に明白にするために、私はすべての帽子にこれを挿入して挿入して行くつもりです。これは挿入された文字列です。

30
00:01:53,540 --> 00:01:54,310
&nbsp;

31
00:01:54,530 --> 00:02:00,650
だから、DOTフォーマットの方法では、文字列をつかんで、中括弧を見た場所に挿入します。

32
00:02:00,650 --> 00:02:01,770
&nbsp;

33
00:02:01,850 --> 00:02:05,810
だからここにいくつかの利点があり、私たちはそれらをすべて通過するつもりです。

34
00:02:05,810 --> 00:02:10,080
1つの利点は、文字列を実際にインデックス位置で挿入できることです。

35
00:02:10,460 --> 00:02:12,770
多くのものを挿入したいと考えてみましょう。

36
00:02:12,770 --> 00:02:17,680
中括弧は中括弧を中括弧といいます。

37
00:02:18,020 --> 00:02:21,380
&nbsp;

38
00:02:23,740 --> 00:02:28,180
次にそのフォーマットとフォックスブラウンと言う。

39
00:02:28,590 --> 00:02:34,560
さて、基本的に、フォーマットは同じ順序で文字列を挿入することになります。

40
00:02:34,590 --> 00:02:37,620
あなたはそれらを中括弧に入れました。

41
00:02:37,620 --> 00:02:40,630
だから私たちはすぐにキツネブラウンを持っています。

42
00:02:40,700 --> 00:02:46,200
&nbsp;

43
00:02:46,290 --> 00:02:53,760
&nbsp;

44
00:02:53,760 --> 00:02:55,800
私たちができることは、このフォーマットコールの中のインデックス位置に基づいています。私が望む順序でそれらの数字を供給することができます。

45
00:02:55,800 --> 00:02:58,550
だから私が望む最初の言葉は実際には素早いです。

46
00:02:58,590 --> 00:03:02,510
これは展示会にもあるので、0 1 2です。

47
00:03:02,760 --> 00:03:09,150
だから、私はオカイ2人がここで最初に行き、次は私が望むものがブラウンになると言うつもりです。

48
00:03:09,150 --> 00:03:13,810
それはポジション1だか​​ら0 1、そして最初の単語です。

49
00:03:13,810 --> 00:03:17,190
ここのFoxインデックス0は、私が望む最後のものになるでしょう。

50
00:03:18,280 --> 00:03:20,200
そして、私がこれを実行すると私は戻ってくる。

51
00:03:20,200 --> 00:03:21,930
クイックブラウンキツネ。

52
00:03:22,000 --> 00:03:24,610
本当に素晴らしいことは、私が実際にこれらを繰り返すことができるということです。

53
00:03:24,670 --> 00:03:31,630
だから、私がFox Fox

54
00:03:31,630 --> 00:03:38,820
Foxを言いたいなら、ここでこれを実行して、今私はFox Fox Foxを持っていますので、私はこれまで博覧会に基づいて仕事をしたい場合に備えて遊びます。

55
00:03:38,830 --> 00:03:43,270
今はインデックスの位置から離れて呼び出すことができるだけでなく、素晴らしいことです。

56
00:03:43,420 --> 00:03:49,420
私はそれらにキーワードを割り当てて、キーワードを呼び出すこともできます。なぜなら、私がここで作業しているように、ゼロがフォックスであるという実際の兆候はなく、ここを見渡して、最初の単語がOKであると言います。

57
00:03:49,570 --> 00:03:54,700
&nbsp;

58
00:03:54,700 --> 00:03:55,730
&nbsp;

59
00:03:55,900 --> 00:03:57,400
私ができることは、それらのキーワードを割り当てることです。

60
00:03:57,430 --> 00:03:58,330
だからこれをやりましょう。

61
00:03:58,330 --> 00:04:05,320
&nbsp;

62
00:04:05,500 --> 00:04:12,130
&nbsp;

63
00:04:12,130 --> 00:04:21,400
&nbsp;

64
00:04:21,550 --> 00:04:22,980
中括弧を設定する中括弧中括弧は書式を指定し、書式呼び出しの中ではFが文字列Foxと等しいと言うので、これを変数代入と考えることができますbeはBrownがqueとquickが等しいと言うことに等しいです。次に、これらの変数名をここで使用できます。

65
00:04:23,010 --> 00:04:25,720
F. BとQを挿入します。

66
00:04:25,730 --> 00:04:30,130
基本的にこれらのキーワードをここでは変数名として使用し、そのように挿入します。

67
00:04:30,130 --> 00:04:36,870
だから、この進行中の代わりにキューがあると言います。

68
00:04:37,710 --> 00:04:39,210
そして、私がこれを実行すると私は戻ってくる。

69
00:04:39,210 --> 00:04:44,790
クイックブラウンキツネとこれは以前よりもよくなりました。なぜなら、それはokのようなものを使っている人にとってはもう少し読みやすいからです。

70
00:04:44,790 --> 00:04:45,860
&nbsp;

71
00:04:45,870 --> 00:04:47,290
Qは迅速です。

72
00:04:47,370 --> 00:04:51,130
振り返って自分自身に尋ねなければならないのではなく、このポジションにあったものもあります。

73
00:04:51,270 --> 00:04:52,980
そしてここに来てフォーマットする。

74
00:04:53,040 --> 00:04:55,140
したがって、これらのキーワードを使用することができます。

75
00:04:55,320 --> 00:04:58,240
そして、私は実際に自分自身のようにそれを実際に好む。

76
00:05:00,170 --> 00:05:05,240
何らかの理由で再びFox Foxを言おうとしたら、これらのブレースのそれぞれにFを入力するだけでFox

77
00:05:05,240 --> 00:05:11,860
Fox Foxを取り戻すことができれば、本当にこれは素晴らしいことです。

78
00:05:11,960 --> 00:05:14,910
だから再度キーワードを使用すると、繰り返しを簡単に使用できます。

79
00:05:15,300 --> 00:05:15,620
OK。

80
00:05:15,620 --> 00:05:21,140
formentメソッドについての議論を終えるために、DOTフォーマットメソッドで浮動小数点フォーマットについて簡単に説明したいと思います。基本的に、浮動小数点数の幅と精度を調整することができます。

81
00:05:21,140 --> 00:05:26,660
&nbsp;

82
00:05:26,660 --> 00:05:28,140
&nbsp;

83
00:05:28,360 --> 00:05:34,040
結果を100を7 7 7で割ったものに等しいと言う例を開始しましょう。

84
00:05:34,060 --> 00:05:39,900
だからあなたはこの結果が小数点以下1桁の数字であることを期待するかもしれません。

85
00:05:40,090 --> 00:05:44,980
さて、私たちが実際に行うことができるのは、これを印刷して、必要な精度のレベルを変更し、数値そのものの幅を変更することもできます。

86
00:05:45,340 --> 00:05:48,260
&nbsp;

87
00:05:49,030 --> 00:05:52,610
ですから、私たちはPrinceと言って始めます。

88
00:05:52,790 --> 00:06:02,820
結果は、次に開いて閉じて中括弧がその形式を言うと、ここで結果がこれを実行すると言うでしょう。

89
00:06:02,830 --> 00:06:03,220
&nbsp;

90
00:06:03,220 --> 00:06:04,570
そして、私たちはその結果を見ました。

91
00:06:04,600 --> 00:06:07,630
そして、基本的にはこの種の大きな精度の数値です。

92
00:06:07,780 --> 00:06:14,170
私ができることは、Rが結果と等しいとし、渡され、中括弧の内側にあり、同じ結果を返すということです。

93
00:06:14,170 --> 00:06:15,490
&nbsp;

94
00:06:15,700 --> 00:06:20,850
だから、フルートの書式設定のための書式設定の仕方は、ドットフォルメントメソッドまでは、あなたが参照している値と同じです。

95
00:06:20,860 --> 00:06:22,760
&nbsp;

96
00:06:22,780 --> 00:06:25,710
その場合、実際の値の名前を表示します。

97
00:06:25,840 --> 00:06:32,050
&nbsp;

98
00:06:32,050 --> 00:06:37,550
&nbsp;

99
00:06:37,570 --> 00:06:42,680
次に、コロンを書いてから、あなたはドットをつけたいと思っている値を書いてから、正確な値を求めてからFに行きます。実際に気にしているのは実際の精度です。いくつかの空白では、本当に大きな値を持つ場合。

100
00:06:42,730 --> 00:06:45,770
だから我々は価値を述べようとしている次のことをしましょう。

101
00:06:45,850 --> 00:06:47,910
それがコロンです。

102
00:06:48,010 --> 00:06:53,260
私たちは、ドットとそれに続く精度のレベルに等しい値を設定します。

103
00:06:53,260 --> 00:06:56,320
したがって、これは主に、この精度値で遊んでいるところです。

104
00:06:56,410 --> 00:06:56,970
想像してみましょう。

105
00:06:56,980 --> 00:06:59,670
私は3つの場所が小数点を通過したいだけです。

106
00:06:59,710 --> 00:07:05,080
だから私は1つ2つと9つを望んでいます。なぜなら、それはその隣にある7つの値のために最大9になるからです。

107
00:07:05,080 --> 00:07:14,330
私はこれを実行し、私は0になる場合3。 1~9。

108
00:07:14,410 --> 00:07:19,540
今私がこの価値を持って周りを回って、本当に大規模にすると、何が起こるのかは空白を追加することになります。

109
00:07:19,540 --> 00:07:21,240
&nbsp;

110
00:07:21,280 --> 00:07:27,490
その理由は基本的に、この文字列番号全体の長さや幅を基本的に記述しているためです。

111
00:07:27,490 --> 00:07:29,000
&nbsp;

112
00:07:29,080 --> 00:07:34,570
それは空白を大量に書くことになりますが、あなたがそれを編集したいと思う特定の状況があるかもしれないので、あまり役に立ちません。

113
00:07:34,660 --> 00:07:36,170
&nbsp;

114
00:07:36,400 --> 00:07:40,930
だから、ここで利用可能ですが、頻繁にあなたと一緒に遊んでいることは、ここでの精度です。

115
00:07:40,930 --> 00:07:41,460
&nbsp;

116
00:07:41,560 --> 00:07:43,310
だから我々はこれを5つにすることができる。

117
00:07:43,690 --> 00:07:44,710
そして、ここで我々は見ることができます。

118
00:07:44,710 --> 00:07:49,950
今度は、空白では小数点を通す数が増え、一般的には小数点以下を渡すことができるので、合計を少なくしています。

119
00:07:49,950 --> 00:07:54,870
&nbsp;

120
00:07:54,970 --> 00:08:03,120
しかし、先に進んで、結果が104ポイントと言うことに等しいと言うつもりの別の例を示しましょう。

121
00:08:03,170 --> 00:08:05,130
1 2 3 4 5。

122
00:08:05,250 --> 00:08:10,560
これを実行すると、反対側にある小数点が本質的に同じものであっても、この浮動小数点値でそれを追加して再生することができます。

123
00:08:10,860 --> 00:08:15,020
&nbsp;

124
00:08:15,370 --> 00:08:18,160
OKで、メソッドのドットを使って書式を設定します。

125
00:08:18,210 --> 00:08:24,870
繰り返しますが、それはあなたが持っている価値であり、本当にあなたの精度の後ろにFがあります。ノートブックでもっと多くの例を調べることができます。

126
00:08:24,870 --> 00:08:27,090
&nbsp;

127
00:08:27,090 --> 00:08:31,310
最後に、f文字列について説明します。これらは書式付き文字列リテラルです。

128
00:08:31,420 --> 00:08:36,930
これらはPython 3で導入されています。 6彼らはまだ非常に新しいので、古いフォーマットの方法に比べていくつかの利点があります。

129
00:08:36,960 --> 00:08:38,790
&nbsp;

130
00:08:38,790 --> 00:08:43,890
&nbsp;

131
00:08:43,890 --> 00:08:48,690
&nbsp;

132
00:08:48,690 --> 00:08:54,780
私は一般的にドットフォーマットの方法を好みますが、多くの人がこの文字列のリテラルメソッドを好んでいます。特に、他の言語から来て、基本的にはそのフォーマットを使用するこのステップをスキップし、代わりに結果や変数名文字列の中に直接入りたい

133
00:08:54,780 --> 00:08:57,970
それで、私たちがやることは、次の方法で新しいセルを2つ作成することです。

134
00:09:00,080 --> 00:09:05,990
私は名前がホセと等しいと言うつもりです。

135
00:09:06,140 --> 00:09:06,750
それを実行します。

136
00:09:06,950 --> 00:09:11,500
それから私がやるべきことは、こんにちはと言います。

137
00:09:11,750 --> 00:09:19,740
彼の名前は、私はこれを実行し、彼の名前はホセですこんにちはと言うフォーマット名を言うだろう。

138
00:09:19,970 --> 00:09:27,870
文字列の前にFをタイプするだけで、フォーマット呼び出しを置き換えて、文字列自体に直接名前を渡すことができます。

139
00:09:27,870 --> 00:09:32,880
&nbsp;

140
00:09:33,090 --> 00:09:35,520
これを実行すると、同じ結果が返されます。

141
00:09:35,520 --> 00:09:40,340
これはFストリングまたはフォーマットされた文字列リテラルと呼ばれ、これは新しいものです。

142
00:09:40,350 --> 00:09:42,150
Python 3 6。

143
00:09:42,150 --> 00:09:45,660
多くの人が、他の言語では非常に一般的なので、この機能を長い間要求しています。

144
00:09:45,660 --> 00:09:46,650
&nbsp;

145
00:09:46,650 --> 00:09:50,460
もう少し古い学校なので、私はこのフォーマット方法に本当に慣れてきたので、私はそんなに好きです。

146
00:09:50,460 --> 00:09:51,180
&nbsp;

147
00:09:51,180 --> 00:09:55,120
しかし、あなたが他の言語から来ているなら、私はあなたが文字列をチェックアウトすることをお勧めします。

148
00:09:55,170 --> 00:09:59,370
&nbsp;

149
00:09:59,370 --> 00:10:04,480
多くの人がこれまでの方法よりも大幅に改善されたと思っています。なぜ、実際にこれらの中括弧の中に変数名を書くことができるのが本当に便利なのかを知ることができます。

150
00:10:06,580 --> 00:10:09,030
これは複数の変数で動作します。

151
00:10:09,220 --> 00:10:17,730
だから、名前はサムの年齢は3歳だとしましょう。

152
00:10:18,130 --> 00:10:22,450
print Fと言って、Pythonにf文字列を知らせることができます。

153
00:10:22,670 --> 00:10:23,340
まあ。

154
00:10:24,690 --> 00:10:25,960
中括弧で囲みます。

155
00:10:26,040 --> 00:10:32,250
名前は中括弧h歳です。

156
00:10:32,480 --> 00:10:34,890
これを実行すると、サムは3歳になるのがわかります。

157
00:10:34,970 --> 00:10:39,260
だから、これは非常に素早く文字列の解釈を行う本当に良い方法です。文字列自体にこれらの変数を挿入するだけです。

158
00:10:39,260 --> 00:10:41,880
&nbsp;

159
00:10:42,290 --> 00:10:42,650
OK。

160
00:10:42,710 --> 00:10:45,160
それらは文字列書式の非常に基本的なものです。

161
00:10:45,170 --> 00:10:48,240
あなたが興味を持っている場合は、ノートブックにもっと多くの例があります。

162
00:10:48,410 --> 00:10:52,160
また、私たちはPython

163
00:10:52,160 --> 00:10:57,560
3でまだ機能しているいくつかの古い文字列書式設定メソッドの例を持っています。これは、ドット形式のメソッドを使用するか、この新しい文字列メソッドが好きな人にとっては本当にお勧めします。

164
00:10:57,560 --> 00:10:57,930
&nbsp;

165
00:10:57,950 --> 00:10:58,930
それを使用してください。

166
00:10:59,120 --> 00:11:03,770
&nbsp;

167
00:11:03,770 --> 00:11:09,070
&nbsp;

168
00:11:09,080 --> 00:11:13,220
この講義でノパールがどのように見えるかを簡単に見せてもらいたいので、プレースホルダの書式設定の例がたくさんあります。これは、このビデオ講義について話すことができるものです。私は本当にそれを使用することをお勧めしますが、浮動小数点数の精度とパディングをどのように使用できるかを見ることもできます。

169
00:11:13,220 --> 00:11:17,920
&nbsp;

170
00:11:17,930 --> 00:11:22,730
また、オブジェクトを再利用する展示によってオブジェクトを挿入する思考形式の方法では、もっと多くの例があります。

171
00:11:22,820 --> 00:11:23,910
&nbsp;

172
00:11:23,930 --> 00:11:25,720
アラインメントの精度もあります。

173
00:11:25,730 --> 00:11:29,840
だからこそ、このすべてのものは、私たちが実際にコース全体で使用するつもりはないが、ノート内で利用できる。

174
00:11:29,840 --> 00:11:30,900
&nbsp;

175
00:11:31,010 --> 00:11:35,250
あなたがこのトピックに深く没頭したいのであれば、そこにたくさんの事例があります。

176
00:11:35,540 --> 00:11:36,040
OK。

177
00:11:36,290 --> 00:11:40,010
&nbsp;

178
00:11:40,010 --> 00:11:46,010
このコースで文字列リテラルを使用すると、このように文字列を挿入して解釈することができます。また、ドット形式のメソッドを使用して変数を挿入することもできます。

179
00:11:46,010 --> 00:11:47,050
&nbsp;

180
00:11:47,270 --> 00:11:47,640
OK。

181
00:11:47,660 --> 00:11:48,780
あなたに役立つことを願ってください。

182
00:11:48,890 --> 00:11:49,910
次の講演でお会いしましょう。
