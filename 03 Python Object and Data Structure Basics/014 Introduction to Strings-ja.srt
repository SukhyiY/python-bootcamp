1
00:00:05,720 --> 00:00:07,460
この講義で皆さんを歓迎します。

2
00:00:07,460 --> 00:00:14,180
一重引用符や二重引用符の構文を使用して、文字列や文字列について議論します。

3
00:00:14,180 --> 00:00:15,770
&nbsp;

4
00:00:15,800 --> 00:00:17,540
ここでは、3つの例を見ることができます。

5
00:00:17,540 --> 00:00:19,890
まず、こんにちはよりも一重引用符のHELLOがあります。

6
00:00:19,910 --> 00:00:20,850
二重引用符。

7
00:00:20,930 --> 00:00:24,380
そして、一重引用符または二重引用符の両方のオプションを持つことについてはうれしいです。

8
00:00:24,380 --> 00:00:29,020
&nbsp;

9
00:00:29,030 --> 00:00:34,030
これは、文字列中に単一の引用符を残しておき、実際の文字列を終わらせることができない場合は、二重引用符などの他の型引用符で囲むことができます。

10
00:00:34,070 --> 00:00:38,810
だからここで私はそこに一重引用符を持つことはできませんが、私たちは二重引用符で全体を包むことができるように一重引用符が突然文字列を終了させたくないことがわかります。

11
00:00:38,810 --> 00:00:42,230
&nbsp;

12
00:00:42,260 --> 00:00:45,010
今度はJuberノートブックでその例を見てみましょう。

13
00:00:46,200 --> 00:00:51,570
&nbsp;

14
00:00:51,570 --> 00:00:56,670
&nbsp;

15
00:00:56,670 --> 00:01:02,670
&nbsp;

16
00:01:02,670 --> 00:01:04,040
ここで重要なのは、文字列は順序付けされたシーケンスであり、各文字が特定の位置にあることがわかっているため、文字列のサブセクションを取得するためにインデックスまたはスライスを使用できることです。または文字列に割り当てられた変数の名前。

17
00:01:04,050 --> 00:01:08,170
ここで、インデックス作成スライスの例をいくつか見てみましょう。

18
00:01:08,400 --> 00:01:13,740
インデクシングとは、文字列から単一の文字を取得する場合に使用される用語です。

19
00:01:13,780 --> 00:01:18,790
したがって、この方法は、すべての文字にインデックス位置が割り当てられています。

20
00:01:18,820 --> 00:01:20,040
だからゼロから始める。

21
00:01:20,080 --> 00:01:23,500
これは、インデックス作成がゼロから始まるというPythonのもう一つの重要な点です。

22
00:01:23,500 --> 00:01:30,940
したがって、Hは対応する数のゼロEを有し、対応する数は1 2 3 0 4である。

23
00:01:30,940 --> 00:01:36,250
だから、もし私がEをつかみたいのであれば、角括弧の中に文字列の後ろを1つ渡して、それからEを返し、後でその例を見ます。

24
00:01:36,250 --> 00:01:39,790
&nbsp;

25
00:01:40,950 --> 00:01:44,510
pi thumbについても興味深いのは、逆索引付けを実際に使用できることです。

26
00:01:44,730 --> 00:01:49,530
だから、あなたは文字列の最後の文字をつかみたいと思っていたかもしれませんが、文字列の長さは実際には分かりませんでした。

27
00:01:49,530 --> 00:01:49,870
&nbsp;

28
00:01:49,890 --> 00:01:52,010
あなたが知っていたのは、最後の手紙を手に入れたかったということでした。

29
00:01:52,200 --> 00:01:57,180
&nbsp;

30
00:01:57,180 --> 00:02:04,640
&nbsp;

31
00:02:04,640 --> 00:02:09,760
幸いなことに、あなたに利用可能な逆索引があるので、文字列の実際の長さに関係なく、文字列の最後の文字を取得するだけで負の値を取得できます。複数の文字のサブセクションを取得することができます文字列

32
00:02:09,770 --> 00:02:11,630
これは構文が少し異なります。

33
00:02:11,630 --> 00:02:15,250
ここでも小区分をつかんでいるので、角カッコで囲んでいます。

34
00:02:15,260 --> 00:02:20,840
私たちはこれの3つの部分を定義することができるようになるでしょう。開始停止とステップと言うことができるでしょう。

35
00:02:20,840 --> 00:02:25,840
だからもう一度これは大括弧で囲まれ、これら3つの用語のそれぞれを区切っています。

36
00:02:25,880 --> 00:02:28,690
スターはスライスの数値インデックスになります。

37
00:02:28,700 --> 00:02:33,850
スタートストップはあなたが上がるが含まれないインデックスになるだろう。

38
00:02:33,970 --> 00:02:35,070
それは重要なメモです。

39
00:02:35,080 --> 00:02:39,280
&nbsp;

40
00:02:39,280 --> 00:02:44,470
そして、我々は実際にそれに焦点を当てるつもりです。そして、少しだけ見ていく例があります。そしてそれはあなたが最初からやめていくジャンプの大きさです。

41
00:02:44,490 --> 00:02:46,350
これらのすべての概念を探そう。

42
00:02:46,380 --> 00:02:49,240
私たちが実際にコード例を見ていると、もっと意味をなさわしくなるでしょう。

43
00:02:49,440 --> 00:02:50,920
ノートブックを見に行きましょう。

44
00:02:51,450 --> 00:02:54,140
文字列の例をいくつか表示してみましょう。

45
00:02:54,150 --> 00:02:58,880
再び、一重引用符を使用するか、二重引用符を使用することができます。

46
00:02:59,070 --> 00:03:01,320
だから私は世界の二重引用符を言う。

47
00:03:01,410 --> 00:03:07,650
また、フレーズ全体を1つの単語にする必要はないので、これも文字列であると言うことができます。

48
00:03:07,920 --> 00:03:09,200
だから私たちはそこに全体のフレーズを持っています。

49
00:03:09,240 --> 00:03:13,350
そして、空白は文字列の中の文字としてカウントされます。

50
00:03:13,350 --> 00:03:18,240
ここで注意すべきことは、一重引用符と二重引用符を混在させることができることです。

51
00:03:18,240 --> 00:03:26,820
だから、もし私が、例えば私のようなものを言うなら、私は走り回っています。

52
00:03:26,820 --> 00:03:28,290
ここで何が起こっているのですか？

53
00:03:28,590 --> 00:03:34,430
&nbsp;

54
00:03:34,490 --> 00:03:39,660
&nbsp;

55
00:03:39,660 --> 00:03:40,700
私は外部で一重引用符を使用しているので、シンタックスのハイライトを得ることは、Pythonを混乱させることです。実際にここで文字列を終了しようとしているときに、ここで文字列を終了しようとしていると思うからです。

56
00:03:40,710 --> 00:03:43,530
したがって、私がセルを実行しようとすると、ここでエラーが発生します。

57
00:03:43,530 --> 00:03:44,910
無効な構文。

58
00:03:44,910 --> 00:03:53,620
私が本当にやりたいことは、これを二重引用符で囲むことです。そうすれば、ここに一重引用符を付けるとエラーは発生しません。

59
00:03:53,620 --> 00:03:54,860
&nbsp;

60
00:03:54,970 --> 00:03:59,920
&nbsp;

61
00:03:59,950 --> 00:04:05,590
そして、私はこのPythonを実行するときに問題はなく、OKと言いますが、ここでは一重引用符を残そうとしていますが、実際には文字列の定義の一部ではありません。

62
00:04:05,600 --> 00:04:08,930
さて、文字列を実際に印刷することについて議論しましょう。

63
00:04:08,930 --> 00:04:15,320
これまでのところ、実際には文字列を返すように要求しています。これが、これらのセルに出入りする理由です。

64
00:04:15,380 --> 00:04:16,400
&nbsp;

65
00:04:16,410 --> 00:04:21,160
それはまた、実際にセルの下の出力に引用符が表示される理由です。

66
00:04:21,470 --> 00:04:25,490
しかし、print関数を使って文字列を実際に印刷することができます。

67
00:04:25,490 --> 00:04:28,610
だから私たちはプリントをこんにちはと言うつもりです。

68
00:04:28,640 --> 00:04:33,670
このメモをうまく実行すると、実際には元の状態に戻ります。

69
00:04:33,800 --> 00:04:36,110
そして、代わりに私たちはもはや引用自体を見ていません。

70
00:04:36,110 --> 00:04:39,500
実際には実際の文字列を印刷しています。

71
00:04:39,590 --> 00:04:46,070
そして、これが重要な理由は、私が世界のことを言ったかったと想像してみようとしているからです。

72
00:04:46,070 --> 00:04:51,280
&nbsp;

73
00:04:51,500 --> 00:04:56,270
何が起こったのか、私はすべてを見るために最後の文字列を取り戻すだけです。

74
00:04:56,390 --> 00:05:02,630
私は実際に結果を印刷しなければならないので、私はプリンストンとラプスが印刷物を見て、プリントしてからハローワールド2と言います。

75
00:05:02,630 --> 00:05:08,170
&nbsp;

76
00:05:08,240 --> 00:05:11,330
そして、私がこれを実行すると、私は弓なりの文字が印刷されるのを見ます。

77
00:05:11,540 --> 00:05:13,100
だから私はもはや出力を見ていない。

78
00:05:13,100 --> 00:05:15,180
私は実際に結果を印刷しています。

79
00:05:15,440 --> 00:05:20,850
現在は、実際にエスケープシーケンスやエスケープシーケンスがあり、あなたの文字列の中に特別なコマンドを持っているようなものがあります。

80
00:05:20,900 --> 00:05:25,220
&nbsp;

81
00:05:25,250 --> 00:05:27,690
だから先に進み、プリンスと言いましょう。

82
00:05:27,890 --> 00:05:29,660
こんにちは世界。

83
00:05:29,660 --> 00:05:35,490
これを実行すると、Hello Worldが1行で表示されますが、実際にはエスケープシーケンスを追加できます。

84
00:05:35,600 --> 00:05:42,980
だから、これはバックスラッシュnになるでしょう、そして、これは基本的にPythonにちょっとこのことを教えています。これは、もはやこのバックスラッシュのために私が実際にあなたに欲しいキャラクターではありません。

85
00:05:42,980 --> 00:05:48,830
&nbsp;

86
00:05:48,980 --> 00:05:50,510
これを新しい行として扱います。

87
00:05:51,600 --> 00:05:59,160
そのエスケープ文字がそこにあれば、ハロースペースはプリンスハロースペースとは言いますが、それは新しいラインよりも宇宙の世界です。

88
00:05:59,310 --> 00:05:59,940
&nbsp;

89
00:05:59,970 --> 00:06:00,980
それがここにあります。

90
00:06:00,990 --> 00:06:04,320
こんにちはスペースと世界私は世界を並べるしたい場合。

91
00:06:04,350 --> 00:06:04,860
こんにちは。

92
00:06:05,100 --> 00:06:08,190
私は実際にこのように触れることができます。

93
00:06:08,190 --> 00:06:13,920
それを実行してみると、PythonのHello

94
00:06:13,980 --> 00:06:16,770
worldは本来このバックスラッシュに付いているので、そこにこの文字の終わりを含めないことを知っています。

95
00:06:16,770 --> 00:06:20,200
したがって、別の一般的なエスケープシーケンスは、タブ用です。

96
00:06:20,370 --> 00:06:22,030
私がそれを実行すると、私は戻ってくる。

97
00:06:22,050 --> 00:06:23,180
こんにちはタブ。

98
00:06:23,190 --> 00:06:24,870
だから4つの空間世界。

99
00:06:25,100 --> 00:06:29,550
これについては、次のプリントフォーマットについて説明します。

100
00:06:29,580 --> 00:06:36,810
ここでは、私があなたに見せたい別の組み込み関数は、Eliane関数またはlength関数です。

101
00:06:36,900 --> 00:06:41,790
これにより、文字列の長さを調べることができます。ここで、文字列に5文字あるため、こんにちはと私は5の長さに戻ることができます。

102
00:06:41,790 --> 00:06:44,680
&nbsp;

103
00:06:44,790 --> 00:06:50,220
文字列にスペースがあると、私は空腹だと言うでしょう。

104
00:06:50,340 --> 00:06:53,390
私がちょうど私が言うことをより明白にしましょう。

105
00:06:53,450 --> 00:06:54,280
我々はこれを実行する。

106
00:06:54,350 --> 00:06:55,990
ここに4つがあることがわかります。

107
00:06:56,030 --> 00:06:59,090
だから私はスペースがある。

108
00:06:59,140 --> 00:07:02,410
したがって、文字列中の4文字の長さとしてカウントされます。

109
00:07:02,420 --> 00:07:03,140
大丈夫。

110
00:07:03,140 --> 00:07:04,370
私たちはここでここでやめます。

111
00:07:04,390 --> 00:07:08,930
次の講義では、文字列の索引付けと文字列のスライスについて議論しています。

112
00:07:08,930 --> 00:07:09,630
&nbsp;

113
00:07:09,650 --> 00:07:10,670
私はそこにお会いしましょう。
