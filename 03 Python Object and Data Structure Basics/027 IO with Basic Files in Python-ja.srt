1
00:00:05,970 --> 00:00:11,280
この講義を皆さんにご紹介します。コースのこのセクションを終了する前に、すべての基本データ型について既に学習しました。

2
00:00:11,280 --> 00:00:13,050
&nbsp;

3
00:00:13,110 --> 00:00:18,000
&nbsp;

4
00:00:18,000 --> 00:00:24,120
&nbsp;

5
00:00:24,120 --> 00:00:30,930
&nbsp;

6
00:00:30,930 --> 00:00:33,420
私はすぐに基本的なテキストファイルで簡単な入出力を実行する方法を検討し、ここで示す方法は、オーディオファイルのテキストファイルであるかどうかにかかわらず、他のファイルタイプ私たちがここで扱っていることは、それらのより高度な機能に本当に関連していくだろう。

7
00:00:33,420 --> 00:00:37,800
これらの他のトピックのいくつかについては、後でこのコースで説明する特定のライブラリをインストールする必要があるかもしれません。

8
00:00:37,800 --> 00:00:40,090
&nbsp;

9
00:00:40,150 --> 00:00:42,600
今のところ、基本的なテキストファイルだけを扱うつもりです。

10
00:00:42,600 --> 00:00:47,610
そこで、Jupiterのノートブックと、このファイルパスの大部分を使用してコンピュータ上に作成します。

11
00:00:47,640 --> 00:00:52,620
最初に作業を開始するには、作業するテキストファイルを作成する必要があります。

12
00:00:52,620 --> 00:00:57,440
あなたがそれらのノートをダウンロードした場合、実際にはすでにテキストファイルであることがテストされています。

13
00:00:57,450 --> 00:01:04,600
あなたのフォルダのどこかに、これらのメモが入っているフォルダと同じフォルダにテストテキストファイルがあるはずです。

14
00:01:04,950 --> 00:01:10,260
そのことを覚えておいてください。しかし、私はJupiterの魔法の機能をどのように使うことができるかを示したり、テキストファイルをすばやく書き込むために呼び出されます。

15
00:01:10,260 --> 00:01:12,740
&nbsp;

16
00:01:12,780 --> 00:01:15,180
これは木星ノートブックでのみ機能します。

17
00:01:15,240 --> 00:01:15,950
しっくり来る。

18
00:01:15,960 --> 00:01:16,560
パーセント記号。

19
00:01:16,560 --> 00:01:20,670
パーセント記号の右側のファイルスペース。

20
00:01:21,760 --> 00:01:25,320
私のファイルは60かそれを何とか呼んでいます。

21
00:01:25,360 --> 00:01:27,160
したがって、これはセルの最初の行になければなりません。

22
00:01:28,180 --> 00:01:31,760
そして、ここでは、あなたが望むものがセルにあるというプレーンテキストを書くことができます。

23
00:01:31,780 --> 00:01:33,990
だから私はこんにちはと言うことができます。

24
00:01:34,240 --> 00:01:37,420
これはテキストファイルです。

25
00:01:37,420 --> 00:01:40,560
これは2行目です。

26
00:01:40,660 --> 00:01:43,690
これが3行目です。

27
00:01:43,720 --> 00:01:45,910
私はその綴りを確かめてください。

28
00:01:45,910 --> 00:01:51,100
あなたがJuerのノートブックを持っていない場合、これはまた、木星のノートブックでのみ機能します。おそらくあなたはSublime Text

29
00:01:51,100 --> 00:01:52,460
Editorで作業しています。

30
00:01:52,480 --> 00:01:58,330
これをファイルに書き込んで、スクリプトが実行されている場所と同じ場所にテキストファイルとして保存してください。

31
00:01:58,330 --> 00:02:00,070
&nbsp;

32
00:02:00,070 --> 00:02:05,950
だから私たちはそれを実行するつもりだ、あなたは正常にテキストファイルを私のファイルを書いて、今私たちが行うことができます実際に開いて、これらのファイルで遊ぶことを参照する必要があります。

33
00:02:05,950 --> 00:02:09,640
&nbsp;

34
00:02:09,640 --> 00:02:16,630
間違ってファイルの名前を間違って編集したり、間違ったディレクトリにファイルを保存したりするのはよくある間違いです。

35
00:02:16,690 --> 00:02:18,010
&nbsp;

36
00:02:18,010 --> 00:02:25,670
ですから、私のファイルが同等で、オープン関数を使用すると言う典型的なものを見せてください。

37
00:02:25,870 --> 00:02:32,400
&nbsp;

38
00:02:32,410 --> 00:02:39,790
そして、この場合、私は私のファイルティックのチームを書くことができるので私はテキストがそこにある私のファイルを知っている、私たちは文字列としてこれを書く必要がありますので、それを書くと、

39
00:02:39,950 --> 00:02:48,110
私がファイルを要求すると、そこにファイルが保存されますが、それはopenと同じです。私たちはWhoops wrong CXXVIIIと言うでしょう。

40
00:02:48,300 --> 00:02:48,940
&nbsp;

41
00:02:48,950 --> 00:02:51,090
だから私は間違いなくそこにファイルがないことを知っている。

42
00:02:51,140 --> 00:02:53,740
私がこれを実行すると、ファイルが見つかりませんでしたエラーを取得します。

43
00:02:53,780 --> 00:02:56,930
だからこれはエラー番号2と呼ばれる本当に一般的なエラーです。

44
00:02:56,990 --> 00:02:58,430
そのようなファイル、又はディレクトリはありません。

45
00:02:58,460 --> 00:03:00,840
約60が間違っています。

46
00:03:00,890 --> 00:03:04,380
したがって、実際にはこのエラーを発生させる2つの方法しかありません。

47
00:03:04,400 --> 00:03:08,760
一つの方法は、誤って間違ったファイル名を渡したことです。

48
00:03:08,780 --> 00:03:11,180
だからこの場合、私は間違ったtxtファイルを書いた。

49
00:03:11,180 --> 00:03:15,190
それは、ファイル名に間違ったファイル名が含まれているためです。

50
00:03:15,320 --> 00:03:21,260
&nbsp;

51
00:03:21,260 --> 00:03:28,160
&nbsp;

52
00:03:28,160 --> 00:03:33,830
&nbsp;

53
00:03:33,850 --> 00:03:35,700
もう1つの可能性は、私が実際に正しいファイルパスを提供しなかったことです。後で同じ講義でそれについて議論しますが、おそらくあなたのコンピュータでDXiが間違っているかもしれませんが、保存されることはありませんあなたのジュピターノートブックと同じ場所に、あなたのデュプレノートブックが現在どこにあるかを知ることができます。

54
00:03:35,720 --> 00:03:38,690
セルにP WDを入力できます。

55
00:03:38,940 --> 00:03:42,140
これを実行すると、作業ディレクトリが印刷されます。

56
00:03:42,170 --> 00:03:47,630
したがって、このノートブックは現在このノートブックが置かれている場所であり、それは保存しなければならないDOTテキストファイルと同じ場所です。

57
00:03:47,630 --> 00:03:50,380
&nbsp;

58
00:03:50,540 --> 00:03:54,050
後で、コンピュータの任意の場所のテキストファイルを呼び出す方法を示します。

59
00:03:54,200 --> 00:03:59,240
しかし、今は、作業中のテキストファイルが、Pを入力したときに出力されるのと同じ場所に保存されていることを確認してください。

60
00:03:59,240 --> 00:04:02,580
W. 。

61
00:04:02,640 --> 00:04:02,880
大丈夫。

62
00:04:02,880 --> 00:04:09,120
続けて私たちは、この特別なコマンドを使用してテキストをそこに書き込むため、テキストが同じ場所にあることを知っています。

63
00:04:09,120 --> 00:04:09,990
&nbsp;

64
00:04:10,260 --> 00:04:14,310
また、特別なコマンドを使用したくない場合は、zipファイルからファイルを取り出すテストがあります。

65
00:04:14,310 --> 00:04:15,410
&nbsp;

66
00:04:15,460 --> 00:04:17,030
だからここで続けましょう。

67
00:04:17,280 --> 00:04:25,530
私のファイルはopenと同じで、私たちが作成したテキストファイルを開き、60個のファイルを実行するmy

68
00:04:25,560 --> 00:04:34,960
fileという名前のファイルを開きます。私が呼び出せる方法はいくつかあります。読み取り方法。

69
00:04:34,960 --> 00:04:37,080
&nbsp;

70
00:04:37,180 --> 00:04:42,560
そして、これは、このテキストファイルにあるすべての巨大な文字列を返します。

71
00:04:42,580 --> 00:04:43,440
時にはそれは良いです。

72
00:04:43,480 --> 00:04:46,670
時々あなたはそれを望んでいませんが、それはあなたに利用可能な方法です。

73
00:04:46,690 --> 00:04:53,310
ここでは、このバックスラッシュnがあり、これが新しい行を示していることがわかります。

74
00:04:53,440 --> 00:04:59,350
あなたはすべてのものを単一の文字列として尋ねたので、文字列は何とか新しい行がどこにあったかを表現する必要があります。

75
00:04:59,350 --> 00:05:00,210
&nbsp;

76
00:05:00,250 --> 00:05:05,200
そして、あなたのテキストファイルファイルは私たちが2番目の行に書いたテキストファイルであり、3番目の行に3番目の行を書きました。

77
00:05:05,200 --> 00:05:07,870
&nbsp;

78
00:05:07,870 --> 00:05:12,610
&nbsp;

79
00:05:12,630 --> 00:05:17,620
だから、私たちが文字列の講義で先に議論したこれらのエスケープシーケンスと、バックスラッシュとを表現するために、新しい行を表します。

80
00:05:17,620 --> 00:05:21,730
今、私がこのファイルをもう一度読み込もうとすると、何か面白いことが起こることがわかります。

81
00:05:21,970 --> 00:05:23,480
あなたは空の文字列を返します。

82
00:05:23,530 --> 00:05:27,240
だから、何度も初心者が彼らの頭を傷つけています。

83
00:05:27,250 --> 00:05:31,230
私はちょうどそれを読んで、今私はそれをもう一度読むことを試みるとき、もはやそこにない。

84
00:05:31,240 --> 00:05:35,590
&nbsp;

85
00:05:35,590 --> 00:05:40,840
&nbsp;

86
00:05:40,840 --> 00:05:45,000
これが起こっている理由は、ファイルの先頭にカーソルがあることを想像することができ、それを読むとカーソルがファイルの最後まで移動し、カーソルをリセットするかゼロに戻す必要があるからですもう一度それを読むために。

87
00:05:45,010 --> 00:05:52,040
だから私のファイルがカーソルをリセットするゼロを求めると言うことができます。

88
00:05:52,040 --> 00:05:54,010
そこにはゼロ出力があるはずです。

89
00:05:54,350 --> 00:05:58,810
そして、あなたがもう一度読んだら、これを見ることができます。

90
00:05:58,830 --> 00:06:06,240
もしあなたがもう一度私はあなたのファイルを保存して私の内容を十分に私の内容をチェックして保存してファイルを保存して保存して、私のファイルがゼロを求めていることをリセットする必要があります、

91
00:06:06,330 --> 00:06:11,660
&nbsp;

92
00:06:15,010 --> 00:06:16,390
&nbsp;

93
00:06:16,420 --> 00:06:18,250
それはただの巨大な文字列です。

94
00:06:18,250 --> 00:06:23,070
だからそれは読まれた方法であり、あなたはすべてを1つの巨大な文字列として捉えることができます。

95
00:06:23,170 --> 00:06:29,950
実際のテキストファイルの文字列形式では、リスト内の各要素が1行であるリストを実際に作成したいので、これは実際には有用ではありません。

96
00:06:29,950 --> 00:06:34,260
&nbsp;

97
00:06:34,300 --> 00:06:35,850
それを行うには、実際には非常に簡単です。

98
00:06:35,860 --> 00:06:38,300
read linesメソッドを使用することができます。

99
00:06:38,410 --> 00:06:41,540
だから我々はゼロに戻ることになるだろう。

100
00:06:43,090 --> 00:06:49,760
そして、私のファイルに行を読んで、私たちがここに戻ってくることを知ってください。

101
00:06:49,760 --> 00:06:54,560
ここでは、各行を別々のオブジェクトまたはこのリストの要素として扱います。

102
00:06:54,560 --> 00:06:59,120
そして、私が後で学ぶであろうこのリストをループすることができるか、または私自身がラインのためにこのリストから索引をつけることができるので、何度も作業するほうが便利です。

103
00:06:59,120 --> 00:07:03,560
&nbsp;

104
00:07:04,580 --> 00:07:05,150
大丈夫。

105
00:07:05,150 --> 00:07:11,300
だから、基本的なテキストファイルを読む基本的な方法は、文字列としてすべてをつかむために読み込まれるか、または各要素が行を表すリストを取得するために行を読み込むことです。

106
00:07:11,720 --> 00:07:17,570
&nbsp;

107
00:07:17,570 --> 00:07:23,220
あなたはまだバックスラッシュを持っていることを覚えておいてください。最後にファイルの場所について議論しましょう。

108
00:07:23,220 --> 00:07:24,900
&nbsp;

109
00:07:24,900 --> 00:07:29,340
これまで、PythonスクリプトやPythonノートブックと同じ場所にあるテキストファイルを開く方法を紹介しました。

110
00:07:29,340 --> 00:07:32,420
&nbsp;

111
00:07:32,700 --> 00:07:37,590
しかし、コンピュータの別の場所に保存されているテキストファイルを開く場合はどうでしょうか。

112
00:07:37,590 --> 00:07:41,640
&nbsp;

113
00:07:41,640 --> 00:07:47,130
あなたのPythonスクリプトやノートブックの場所を常にテキストファイルと同じ場所に置く必要があるのは本当に迷惑でしょう。

114
00:07:47,160 --> 00:07:48,470
コンピュータ上の任意の場所。

115
00:07:48,510 --> 00:07:52,070
あなたがする必要があるのは、完全なファイルパスを提供することだけです。

116
00:07:52,090 --> 00:07:57,640
ただし、ファイルパスの構文は、Windowsの場合や、Mac

117
00:07:58,000 --> 00:08:00,280
OSやLinuxの場合によって若干異なります。

118
00:08:00,280 --> 00:08:03,460
だから、Windowsでは典型的なファイルパスは、このように見えるでしょう。

119
00:08:03,460 --> 00:08:05,440
Cコロンと言うでしょう。

120
00:08:05,470 --> 00:08:10,720
そして、二重のバックスラッシュを持っていることに注意してください。これは基本的にエスケープ文字なので、Pythonはこれを混同しません。

121
00:08:10,720 --> 00:08:12,220
&nbsp;

122
00:08:12,250 --> 00:08:17,980
最初のバックスラッシュをエスケープ文字として使用しているのは、ユーザー名が小文字の場合、Paiceが突然思考したくないということです。

123
00:08:17,980 --> 00:08:19,430
&nbsp;

124
00:08:19,450 --> 00:08:20,620
あなたは新しい行を意味します。

125
00:08:20,620 --> 00:08:22,990
だからここに二重バックスラッシュがあります。

126
00:08:23,170 --> 00:08:25,350
それはWindows用であり、このように見えます。

127
00:08:25,390 --> 00:08:28,920
そして、ファイルパス全体をテキストファイルの文字列として渡すだけです。

128
00:08:29,140 --> 00:08:32,110
Mac OSやLinuxの場合は少し違って見えます。

129
00:08:32,110 --> 00:08:37,980
あなたはフォワードスラッシュをここに持っていて、それはユーザーのあなたのユーザー名とフォルダーとテキストファイルになります。

130
00:08:38,050 --> 00:08:45,220
実際に何が実際に見えるかを確認したい場合は、その便利なPWTを再びセルに使用するだけです。

131
00:08:45,220 --> 00:08:46,330
&nbsp;

132
00:08:46,380 --> 00:08:50,670
私はすでにそれがどのようなものかの形式の種類を持っていることに注意してください。

133
00:08:50,680 --> 00:08:55,150
私は今Windowsコンピュータでこれを実行していますので、フォーマットが何であるかを表示し、そこでそこからコピーを貼り付けてから、このフォルダのパスを追加して遊びます。

134
00:08:55,150 --> 00:09:01,270
&nbsp;

135
00:09:01,270 --> 00:09:04,870
正しいテキストファイルをつかんでこのファイルの議論を終わらせるために。

136
00:09:04,870 --> 00:09:12,550
私はこのファイルを開いてすぐにファイルを開くためのベストプラクティスについて言及したいと思います。私はそれを私のファイルと呼んでいます。

137
00:09:12,790 --> 00:09:15,240
しかし、技術的には開いているので、実際には閉じなければなりません。

138
00:09:15,250 --> 00:09:21,610
あなたのコンピュータ上のどこかでこのファイルを開き、そのファイルを削除しようとしていたとしましょう。

139
00:09:21,610 --> 00:09:24,330
&nbsp;

140
00:09:24,370 --> 00:09:28,510
Pythonがまだこのファイルを使用しているというエラーが出て、そのようなエラーを避けるために作業を終えたら、実際に手動で閉じなければなりません。

141
00:09:28,510 --> 00:09:32,100
&nbsp;

142
00:09:32,100 --> 00:09:36,340
私たちはspecial withステートメントを使用することができ、これは次のようになります。

143
00:09:36,340 --> 00:09:38,220
このようなことを言うのではなく、あなたは言うでしょう。

144
00:09:38,260 --> 00:09:45,150
最初に私のファイルopen testi XTiだった古い方法を見てみましょう。

145
00:09:45,150 --> 00:09:50,650
だからそれは古いことでした。私はそれがDXiという私のファイルと呼ばれていたと信じています。

146
00:09:51,070 --> 00:09:59,570
さて、私たちはオープンで言うことができますし、私たちはあなたがこれをあなたが選択した変数名であり、そこにコロンを持っていると私が言うことができる、あなたがこれを呼ぶことを望んでいます。

147
00:09:59,570 --> 00:10:04,970
&nbsp;

148
00:10:05,300 --> 00:10:07,680
そして、私がエンターを押したとき、ここで何が起こるか気づく。

149
00:10:07,690 --> 00:10:13,520
&nbsp;

150
00:10:13,520 --> 00:10:20,450
&nbsp;

151
00:10:21,530 --> 00:10:31,370
&nbsp;

152
00:10:31,370 --> 00:10:35,810
私はインデントを持っており、基本的には、このブロック内にあるこのコード内のコードは、インデントされたコードブロックがこの新しいファイルをこのテキストファイルの変数として使用するため、内容が新しいファイルの読み込みと等しいと言うことができます私がこれを実行するとき、私はもはやファイルを閉じることを心配する必要はなく、すぐに正しいテキストファイル名がここに来てそれを確認するだけをチェックしました。

153
00:10:35,960 --> 00:10:36,940
そして、我々は正しかった。

154
00:10:37,220 --> 00:10:40,070
OKこれを実行して何が起こるかを見てみましょう。

155
00:10:40,130 --> 00:10:46,220
&nbsp;

156
00:10:46,220 --> 00:10:51,620
&nbsp;

157
00:10:51,620 --> 00:10:53,950
だから私はそれを実行し、今はファイルを閉じることについてもう心配する必要はなく、私はこのコードブロックにあった内容を取り込めます。そして、これらの強力なコードブロックのアイデアにもっと慣れるつもりですコースの次のセクション。

158
00:10:54,290 --> 00:10:59,840
ここでは、ファイルの読み書きについて説明していきます。

159
00:10:59,870 --> 00:11:03,890
&nbsp;

160
00:11:03,890 --> 00:11:08,750
今は、基本的にはファイルを読み込んでいるだけに気づいているかもしれませんが、ファイルに書き込んでファイルを上書きすることもできます。これは重要な違いです。

161
00:11:09,580 --> 00:11:18,440
だから私たちは開いたと言うつもりですが、私はTx

162
00:11:18,440 --> 00:11:22,530
tカンマと私がここでやろうとしていることは私のファイルを開いて、私のカーソルを開いたままに書いていると言うつもりです。

163
00:11:22,550 --> 00:11:24,410
私はシフトタブを行うつもりです。

164
00:11:24,830 --> 00:11:29,750
そして、これは、既に定義されている関数の情報を開きます。

165
00:11:29,810 --> 00:11:31,840
それでは、後で我々自身の機能を見つけるつもりです。

166
00:11:31,950 --> 00:11:36,770
&nbsp;

167
00:11:36,770 --> 00:11:41,870
&nbsp;

168
00:11:41,870 --> 00:11:47,240
しかし、あなたはオープン関数が組み込まれていることに気づくでしょう。ここではいくつかのドキュメントを見ることができます。なぜならこれらを愛しているからです。そしてPythonを教えるための本を知っているということです。本当に有用な情報であり、あなたはもっと多くのものを見るためにここにプラスを持つことができます。

169
00:11:47,240 --> 00:11:47,900
&nbsp;

170
00:11:47,900 --> 00:11:53,040
だから、基本的にオンラインで行かなくてもノートブックにドキュメントを置くことができます。

171
00:11:54,350 --> 00:11:54,620
大丈夫。

172
00:11:54,620 --> 00:11:59,520
ここにはモードがあり、デフォルトではrに設定されています。

173
00:11:59,780 --> 00:12:03,540
そこでコピーしてここに貼り付けます。

174
00:12:03,540 --> 00:12:05,890
同じモードはRに等しい。 そして、私のファイルの内容が私のファイルの読み込みと等しいと言う。

175
00:12:05,970 --> 00:12:13,430
だから私はこれを実行するときに問題はありません。

176
00:12:13,470 --> 00:12:15,990
私は内容を見て、それがあります。

177
00:12:15,990 --> 00:12:19,450
これをWに切り替えましょう。 それは右を表す。

178
00:12:19,470 --> 00:12:24,020
もし私が再びセルを実行しようとすると、サポートされていない操作が読めないと言うでしょう。

179
00:12:24,930 --> 00:12:30,250
&nbsp;

180
00:12:30,360 --> 00:12:36,630
それは、ファイルを開くために選択するモードに応じて、ファイルを読み込めるのではなく、ファイルに書き込むように選択することができるからです。

181
00:12:36,630 --> 00:12:39,510
これは基本的にアクセス許可として知られています。

182
00:12:39,570 --> 00:12:41,510
&nbsp;

183
00:12:41,580 --> 00:12:46,620
場合によっては、特定のスクリプトにファイルへの書き込み権限のみを持たせたり、ファイルへの読み込み権限のみを持たせたり、両方の権限を持たせたいことがあります。

184
00:12:46,620 --> 00:12:51,000
だから私たちがここでできることは、For readまたはW forを使うことができる次のオプションです。

185
00:12:51,030 --> 00:12:58,630
右。

186
00:12:58,640 --> 00:12:59,200
&nbsp;

187
00:12:59,210 --> 00:13:05,420
これはファイルを上書きするか、ファイルに追加するためにaを使うことができ、基本的にはテキストファイルの最後に行を追加するだけです。

188
00:13:05,420 --> 00:13:08,190
OK。

189
00:13:08,660 --> 00:13:08,900
では、読み書きと追加モードについて議論するのにちょっと時間をかけましょう。

190
00:13:08,900 --> 00:13:13,530
そのモードを編集できることを示しています。

191
00:13:13,610 --> 00:13:15,640
もう一度すばやくすべてのことについて話しましょう。

192
00:13:15,650 --> 00:13:18,100
モードをWと同じに設定した場合、それは読み込み専用です。

193
00:13:18,200 --> 00:13:23,170
それだけが正しいです。

194
00:13:23,180 --> 00:13:24,240
したがって、これはすでに存在するファイルを上書きします。

195
00:13:24,250 --> 00:13:26,720
または、すでに存在しないファイルを開こうとすると、それをmontt Wで開きます。

196
00:13:26,870 --> 00:13:30,910
彼らは実際に新しいファイルを作成し、ちょうど2秒後にモードAがペンのみに表示され、これがPlusにファイルの読み書きを追加してからw

197
00:13:31,070 --> 00:13:36,320
Plusが両方の書き込み用にファイルを開く読書。

198
00:13:36,320 --> 00:13:42,620
ファイルが存在していれば、それは既存のファイルを上書きします。

199
00:13:42,980 --> 00:13:44,030
読み書き用の新しいファイルを作成します。

200
00:13:44,060 --> 00:13:48,490
彼らの周りに遊びの並べ替え。

201
00:13:48,500 --> 00:13:50,490
新しいファイルを作りましょう。私はこれを木星のノートブックからやっていきます。

202
00:13:50,600 --> 00:13:51,670
テキストエディタでもこれを行うことができますが、60で新しいファイルを作成します。

203
00:13:51,680 --> 00:13:54,320
2番目の最初の2つのうちの1つ、3番目の3つ。

204
00:13:54,380 --> 00:13:59,030
私はそれを実行して、私が新しいファイルテキストを作成したことを確認します。

205
00:13:59,150 --> 00:14:01,790
この場合、私はこれを複数回実行するので、上書きしました。

206
00:14:02,060 --> 00:14:06,680
しかし、次のようにしましょう。

207
00:14:06,690 --> 00:14:10,080
開いた状態でそれを言うと、私の新しいファイルは実際に自動補完することができるはずです。

208
00:14:10,250 --> 00:14:11,090
&nbsp;

209
00:14:11,090 --> 00:14:18,480
だから、私の新しいファイル・テキスト・モードでは、Fと読むだけで読んで、次にfを読むようにしています。そこには、最初の2つは3番目の2番目の3つで表示されます。

210
00:14:18,510 --> 00:14:30,240
ですから、これは読書には非常に便利な読書モードです。

211
00:14:30,240 --> 00:14:33,700
&nbsp;

212
00:14:33,720 --> 00:14:37,240
&nbsp;

213
00:14:37,620 --> 00:14:45,480
たとえば、私が16を提出したオープン・マインドで言うことができる新しい行を追加したいとしましょう。私はモードが等しいと言うでしょう。この場合、Fとして新しい行を追加したいと言いますファイルに書き込む場合は、Fドットと言うだけです。

214
00:14:49,120 --> 00:14:55,830
&nbsp;

215
00:14:55,830 --> 00:15:03,570
そしてあなたが読んでいるのではなく、あなたが正しいと言うことを期待しているかもしれないし、これに新しい行を書きましょう。

216
00:15:03,570 --> 00:15:08,910
私が追加を使用しているので、私はここでやっていることです。

217
00:15:08,910 --> 00:15:13,240
つまり、このテキストファイルの最後にカーソルがあり、4行目にカーソルが追加または追加されます。

218
00:15:13,290 --> 00:15:16,150
&nbsp;

219
00:15:16,290 --> 00:15:22,890
だから、私はそれを実行し、ここでコードをコピーして新しいセルに貼り付けて再実行しましょう。

220
00:15:22,890 --> 00:15:24,810
&nbsp;

221
00:15:24,870 --> 00:15:32,340
そして、私がこれをもう一度走らせれば、最初の2つは3番目の2番目のものが3番目のものがForthのために見える。

222
00:15:32,340 --> 00:15:33,490
ここで実際には考慮しなかったことは、私が新しい行を追加するのを忘れてしまったことです。

223
00:15:33,490 --> 00:15:39,570
だから、私ができることは、バックスラッシュを言うことです。

224
00:15:39,600 --> 00:15:45,180
そして、実際に新しい行を挿入するためにここに。

225
00:15:45,180 --> 00:15:48,700
したがって、これらの2つのセルをもう一度実行すると、4番目のセルが4番目に表示されます。

226
00:15:48,730 --> 00:15:51,510
&nbsp;

227
00:15:51,510 --> 00:15:56,910
残念ながら、残念ながら私はまだここにこの外国人がいますので、ここに戻ってそのファイルをもう一度上書きすることですべてをリセットします。

228
00:15:56,920 --> 00:16:01,510
だからこのセルをもう一度実行してから、セルをもう一度実行してみましょう。

229
00:16:01,510 --> 00:16:04,930
今私は最初の2秒から3分の4の4分の1を見ることができます。

230
00:16:04,930 --> 00:16:10,350
これは、Wを書くために今読むことと出ることの違いです。

231
00:16:10,640 --> 00:16:14,420
&nbsp;

232
00:16:14,480 --> 00:16:21,530
私は開いていると言うことができ、ここで私はちょうどXTiの手紙を作って、モードはWと等しいと言うでしょう。

233
00:16:21,560 --> 00:16:30,910
このWモードでは、既存のファイルを上書きするか、ファイルが存在しない場合は実際に作成されます。

234
00:16:31,180 --> 00:16:32,640
だから彼はFという名前で名前をつくり、その後Fと言うことができます。

235
00:16:32,890 --> 00:16:39,940
私はこのファイルを作成したが、エラーはない。

236
00:16:39,940 --> 00:16:41,420
&nbsp;

237
00:16:41,560 --> 00:16:47,010
このテキストファイルは、モードw Pythonでオープンして以来存在していませんが、先に進んで私たちのためにそのテキストファイルを作成したからです。

238
00:16:47,150 --> 00:16:53,090
私たちがちょうど私たちのような別のモードの同じことをやろうとすると、そこではエラーが発生していました。

239
00:16:53,100 --> 00:16:58,350
&nbsp;

240
00:16:58,380 --> 00:17:00,540
それでは、このファイルを読んでください。

241
00:17:00,540 --> 00:17:05,400
まあ開いているとそれを言う H. Fと私は本当に今あなただけのタブのオートコンプリートをお勧めします。

242
00:17:05,400 --> 00:17:06,080
だから、あなたは、モードがFと同じであると言う全てを暗記する必要があります。

243
00:17:06,970 --> 00:17:09,080
そして、fを読んでから、見てみましょう。

244
00:17:09,280 --> 00:17:14,560
私はこのファイルを作成しました。

245
00:17:14,650 --> 00:17:26,250
だから、これらは、追加モード書き込みモードまたは読み取りモードのいずれかでファイルを開く基本的な考え方です。

246
00:17:26,250 --> 00:17:26,910
あなたは、この講義に沿ってあなたのノートブックでもっと多くの例を見ることができます。

247
00:17:26,940 --> 00:17:28,030
&nbsp;

248
00:17:28,110 --> 00:17:34,200
皆さん、本当にありがとうございます。次回の講義で、実際にテストを開始する講義と、ここで取り上げた多くのトピックでお会いしましょう。

249
00:17:34,220 --> 00:17:38,630
&nbsp;

250
00:17:39,500 --> 00:17:44,400
&nbsp;

251
00:17:44,400 --> 00:17:45,830
&nbsp;
